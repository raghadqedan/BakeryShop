@model ForgotPasswordVM
@{
    ViewData["Title"] = "ForgotPassword";
    Layout = "~/Views/Shared/_AuthLayout.cshtml";
}
<!-- ForgotPassword  Form -->
<section class="Forgot-Password">
    <div class="container">
        <div class="signin-content">
            <div class="signin-image">
                <figure><img src="~/auth/images/signup-image.jpg" alt="sing up image"></figure>
                <a asp-controller="Account" asp-action="Register" class="signup-image-link">Create an account</a>
               

            </div>

            <div class="signin-form">
                <h2 class="form-title">Forgot Password </h2>
                <form  class="register-form" id="forgotPassword-form">
                    <div class="form-group">
                        <label asp-for="Email"><i class="zmdi zmdi-account material-icons-name"></i></label>
                        <input asp-for="Email" id="Email" placeholder="Email" />
                        <span asp-validation-for="Email">  </span>
                    </div>
                  
                    <div class="form-group form-button">
                        <input type="submit" name="ResetPassword" id="resetPassword" class="form-submit forgot" value="Reset Password" />
                    </div>
                </form>

            </div>
        </div>
    </div>
</section>

 <partial name="_ValidationScriptsPartial" />
<script>
    // Select the form
    var form = document.querySelector("#forgotPassword-form");

    // Add a submit event listener to the form
    form.addEventListener("submit", async (e) => {
        e.preventDefault(); // Prevents form from submitting automatically

        try {
            const response = await fetch(`/Account/SendResetPasswordUrl`, {
                method: 'POST', // Use POST for form submission
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    email: document.querySelector("#Email").value // Assuming you have an email input with ID 'Email'
                })
            });

            if (response.ok) {
                await Swal.fire({
                    title: "Check your email",
                    text: "The reset password link has been sent.",
                    imageUrl: "/files/images/check-email.webp", // Use a direct client-side path
                    imageWidth: 400,
                    imageHeight: 200,
                    imageAlt: "Custom image",
                });
            } else {
                Swal.fire("Error!", "Something went wrong. Please try again.", "error");
            }
        }catch (error) {
            console.error("Error during the request:", error);
            Swal.fire({
                title: "Error",
                text: "Something went wrong. Please try again later.",
                icon: "error",
            });
        }
    });
</script>


 

                       <!--    var submitBtn = document.querySelector(".forgot");
    submitBtn.addEventListener("click",async(btn)=>{
        e.preventDefault();
    Swal.fire({
        title: "Check Your Email",
        imageUrl: "@Url.Content("~/files/images/check-email.webp")",
        imageWidth: 400,
        imageHeight: 200,
        imageAlt: "Custom image"
    }).then(async(result) => {
                    if (result.isConfirmed) {
                const response = await fetch(`/Account/SendResetPasswordUrl`,
                {method:'Post',headers:{"Content-Type":"application/json"}});}



    });
    });-->



<!--
@if (TempData["SendResetPasswordEmailSuccess"] != null)
{
    <text>   swal.fire({
                        title: "check your email",
                        //showconfirmbutton: false,
                        text: "the reset password link has been sent.",
                        imageUrl: "@Url.Content("~/files/images/check-email.webp")",
                        imageWidth: 400,
                        imageHeight: 200,
                        imageAlt: "custom image"
                    });
    </text>
}

@if (TempData["SendResetPasswordEmailFailed"] != null)
{
    <text>  swal.fire({
                        title: "Error",
                        //showconfirmbutton: false,
                       text: "There was an issue sending the reset password link. Please try again.",
                        imageUrl: "@Url.Content("~/files/images/check-email.webp")",
                        imageWidth: 400,
                        imageHeight: 200,
                        imageAlt: "custom image"
                    });
    </text>


}
-->
